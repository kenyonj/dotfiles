#!/usr/bin/env bash

exec > >(tee -i "$HOME/dotfiles_install.log")
exec 2>&1
set -x

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

# Ensure we're working from the root directory
cd $SCRIPT_DIR && cd ..

function remove_if_exists() {
  if [[ -a "$1" ]]; then
    rm "$1"
  fi
}

function move_if_exists() {
  if [[ -a "$1" ]]; then
    mv "$1" "$2"
  fi
}

# Set up Homebrew and launch agents
if [[ -z "$CODESPACES" ]]; then
  if ! [ -x "$(command -v brew)" ]; then
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  fi

  for dir in script/system_customizations/*; do
    if [ -d "$dir" ]; then
      if [ -f "$dir/command" ]; then
        bash "$dir/command"
      fi

      if [ -f "$dir/plist" ]; then
        base_dir=$(basename $dir)
        new_plist="$HOME/Library/LaunchAgents/com.user.$base_dir.plist"
        cp "$dir/plist" "$new_plist"
        launchctl load "$new_plist"
      fi
    fi
  done
fi

# Clean up codespaces environment
if [[ -n "$CODESPACES" ]]; then
  if [[ -n "$HOMEASSISTANT_WEBHOOK_URL" ]]; then
    curl -X POST \
      -H "Content-Type: application/json" \
      --data '{ "state": "started", "codespace_name": "'"$CODESPACE_NAME"'" }' \
      "$HOMEASSISTANT_WEBHOOK_URL"
  fi

  sudo chsh -s $(which zsh) $(whoami)

  if [[ ! -d "~/.cache" ]]; then
    mkdir ~/.cache
  fi
fi

function create_sym_link() {
  local source="$(pwd)/$1"
  local target=$2

  mkdir -p $(dirname "$target")

  if [[ -f $target ]]; then
    if [[ ! -L $target ]]; then
      echo "$target already exists but is not a symlink!"
    else
      echo "$target already exists"
    fi
  else
    ln -svf "$source" "$target"
  fi
}

# Standard dotfiles
create_sym_link excludes ~/.excludes
move_if_exists ~/.gitconfig ~/.gitconfig.old
create_sym_link gitconfig ~/.gitconfig
create_sym_link gitmessage ~/.gitmessage
create_sym_link gvimrc ~/.gvimrc
create_sym_link hushlogin ~/.hushlogin
create_sym_link ignore ~/.ignore
create_sym_link inputrc ~/.inputrc
create_sym_link irbrc ~/.irbrc
create_sym_link ripgreprc ~/.ripgreprc
create_sym_link tmux.conf ~/.tmux.conf
create_sym_link tmux.overmind.conf ~/.tmux.overmind.conf
create_sym_link vimrc ~/.vimrc
create_sym_link zlogin ~/.zlogin
remove_if_exists ~/.zshrc
create_sym_link zshrc ~/.zshrc
create_sym_link zprofile ~/.zprofile
create_sym_link gnupg ~/.gnupg

# Bat
create_sym_link config/bat/config ~/.config/bat/config

# Lazygit
create_sym_link config/lazygit/config.yml ~/.config/lazygit/config.yml

# Kitty
create_sym_link config/kitty/kitty.conf ~/.config/kitty/kitty.conf

# Ghostty
create_sym_link config/ghostty/config ~/.config/ghostty/config

# Neovim
create_sym_link config/nvim/autocommands.vim ~/.config/nvim/autocommands.vim
create_sym_link config/nvim/colors.vim ~/.config/nvim/colors.vim
create_sym_link config/nvim/config.vim ~/.config/nvim/config.vim
create_sym_link config/nvim/init.lua ~/.config/nvim/init.lua
create_sym_link config/nvim/lua/lazy-setup.lua ~/.config/nvim/lua/lazy-setup.lua

create_sym_link config/nvim/lua/plugins/welcome.lua ~/.config/nvim/lua/plugins/welcome.lua
create_sym_link config/nvim/lua/plugins/whichkey.lua ~/.config/nvim/lua/plugins/whichkey.lua
create_sym_link config/nvim/lua/plugins/legacy.lua ~/.config/nvim/lua/plugins/legacy.lua
create_sym_link config/nvim/lua/plugins/cmp.lua ~/.config/nvim/lua/plugins/cmp.lua
create_sym_link config/nvim/lua/plugins/lsp.lua ~/.config/nvim/lua/plugins/lsp.lua
create_sym_link config/nvim/lua/plugins/treesitter.lua ~/.config/nvim/lua/plugins/treesitter.lua
create_sym_link config/nvim/lua/plugins/formatter.lua ~/.config/nvim/lua/plugins/formatter.lua
create_sym_link config/nvim/lua/plugins/status.lua ~/.config/nvim/lua/plugins/status.lua
create_sym_link config/nvim/lua/plugins/gitsigns.lua ~/.config/nvim/lua/plugins/gitsigns.lua
create_sym_link config/nvim/lua/plugins/test.lua ~/.config/nvim/lua/plugins/test.lua
create_sym_link config/nvim/lua/plugins/fugitive.lua ~/.config/nvim/lua/plugins/fugitive.lua
create_sym_link config/nvim/lua/plugins/telescope.lua ~/.config/nvim/lua/plugins/telescope.lua
create_sym_link config/nvim/lua/plugins/tbro.lua ~/.config/nvim/lua/plugins/tbro.lua
create_sym_link config/nvim/lua/plugins/pry.lua ~/.config/nvim/lua/plugins/pry.lua
create_sym_link config/nvim/lua/plugins/copilot.lua ~/.config/nvim/lua/plugins/copilot.lua
create_sym_link config/nvim/lua/plugins/noice.lua ~/.config/nvim/lua/plugins/noice.lua
create_sym_link config/nvim/lua/plugins/trouble.lua ~/.config/nvim/lua/plugins/trouble.lua
create_sym_link config/nvim/lua/plugins/mini.lua ~/.config/nvim/lua/plugins/mini.lua
create_sym_link config/nvim/lua/plugins/grug.lua ~/.config/nvim/lua/plugins/grug.lua
create_sym_link config/nvim/lua/plugins/snippets.lua ~/.config/nvim/lua/plugins/snippets.lua
create_sym_link config/nvim/lua/plugins/tmuxnavigator.lua ~/.config/nvim/lua/plugins/tmuxnavigator.lua

create_sym_link config/nvim/lua/plugins/langs/go.lua ~/.config/nvim/lua/plugins/langs/go.lua
create_sym_link config/nvim/lua/plugins/langs/ruby.lua ~/.config/nvim/lua/plugins/langs/ruby.lua
create_sym_link config/nvim/lua/plugins/langs/typescript.lua ~/.config/nvim/lua/plugins/langs/typescript.lua

# Git template
create_sym_link git_template/hooks/ctags ~/.git_template/hooks/ctags
create_sym_link git_template/hooks/post-checkout ~/.git_template/hooks/post-checkout
create_sym_link git_template/hooks/post-commit ~/.git_template/hooks/post-commit
create_sym_link git_template/hooks/post-merge ~/.git_template/hooks/post-merge
create_sym_link git_template/hooks/post-rewrite ~/.git_template/hooks/post-rewrite

# Zsh
create_sym_link zsh/aliases.zsh ~/.zsh/aliases.zsh
create_sym_link zsh/fzf.zsh ~/.zsh/fzf.zsh
create_sym_link zsh/g.zsh ~/.zsh/g.zsh
create_sym_link zsh/prompt.zsh ~/.zsh/prompt.zsh

# Mise
create_sym_link config/mise/config.toml ~/.config/mise/config.toml

# Setup RDM
if [[ -n "$CODESPACES" ]]; then
  # Use RDM for copy/paste and open support
  wget https://github.com/BlakeWilliams/remote-development-manager/releases/download/v0.0.3/rdm-linux-amd64
  sudo mv rdm-linux-amd64 /usr/bin/rdm
  chmod +x /usr/bin/rdm

  if [[ "$TERM_PROGRAM" != 'vscode' ]]; then
    gh config set browser "rdm open"
    echo 'alias open="rdm open"' >> ~/.zshenv
    echo 'alias xdg-open="rdm open"' >> ~/.zshenv
  fi
fi

# Codespaces installs
if [[ -n "$CODESPACES" ]]; then
  sudo apt-get update -y
  sudo apt-get install -y \
    ripgrep \
    shellcheck \
    fuse \
    ruby-dev \
    tmux \
    jq \
    bat \
    fd-find \
    autojump \
    luarocks

  # install vale
  wget https://github.com/errata-ai/vale/releases/download/v2.28.0/vale_2.28.0_Linux_64-bit.tar.gz
  tar -xvzf vale_2.28.0_Linux_64-bit.tar.gz
  sudo mv vale /usr/bin/vale

  # install tokei
  wget https://github.com/XAMPPRocky/tokei/releases/download/v12.1.2/tokei-x86_64-unknown-linux-gnu.tar.gz
  tar -xvzf tokei-x86_64-unknown-linux-gnu.tar.gz
  sudo mv tokei /usr/bin/tokei

  echo "export SKIP_GH_PRE_PUSH_HOOKS" >> ~/.zshrc

  # Install the latest neovim
  wget https://github.com/neovim/neovim/releases/download/v0.10.0/nvim.appimage
  chmod u+x nvim.appimage
  sudo mv nvim.appimage /usr/local/bin/nvim

  if ! [ -x "$(command -v npm)" ]; then
    echo 'Could not install node neovim plugin' >&2
  else
    npm install -g neovim
  fi

  if ! [ -x "$(command -v pip3)" ]; then
    echo 'Could not install python neovim plugin' >&2
  else
    pip3 install neovim
  fi

  # Install neovim plugins
  nvim --headless "+Lazy! update" +qall

  sudo gem install neovim

  git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
  yes | ~/.fzf/install --no-bash --no-fish --key-bindings --completion --update-rc

  if [[ -n "$HOMEASSISTANT_WEBHOOK_URL" ]]; then
    curl -X POST \
      -H "Content-Type: application/json" \
      --data '{ "state": "completed", "codespace_name": "'"$CODESPACE_NAME"'" }' \
      "$HOMEASSISTANT_WEBHOOK_URL"
  fi
else
  # Local brew bundle install
  if [[ -z "$SKIP_BREW_BUNDLE" ]]; then
    brew bundle
  else
    echo "skipping brew bundle"
  fi

  # trust the new dotfile config for mise
  mise trust

  # install tool versions with mise
  mise install
fi
